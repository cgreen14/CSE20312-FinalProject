//seanHowley

Activity Log:
------------------------------------------------------
Monday of Spring Break - 12pm-1:30pm:
Researched a few different gaming libraries including
	pygame, pyglet, and 2dlib. After seeing that pygame seems
	to be more up to date (the last time that pyglet was updated
	was around 2012) and seemed to have surplus resources and tutorials
	for those who are new to it, we decided that this was the best
	option, and this is what we would use to create Tower Defense.
------------------------------------------------------
Thursday of Spring Break - 1pm-4pm:
Began learning how to use pygame by utilizing a tutorial we found 
	at https://pythonprogramming.net/pygame-python-3-part-1-intro/. Using this
	as well as a few other resources (to figure out certain nuances such as using pip
	to install pygame on a machine if it doesnt have it yet so that it can run the 
	program). By the end of this session I had pretty much finished up my
	program which could open a pygame window and display an image which
	I chose to be a tower from tower defense that I pulled offline.
------------------------------------------------------
Program Description:

My program is called tower.py and to the user, when it is 
	run it displays a single tower in a pygame window. I plan on elaborating on this
	in the coming weeks while I continue to experiment with and master pygame by
	adding multiple towers, add moving (rotating parts to them), moving towers
	using user input (keyboard input or mouse input), and eventually creating the actual
	gameboard which will cosist of different types of towers and moving vehicles.
	This is simply a starting point for things to come. *NOTE: in order for the user to 
	run this they must have the tower.png file in the same working directory as 
	tower.py*
From the programmers perspective the first thing that had to be done was to import
	the sys and os modules, then import pygame, and install pygame using pip if the
	user does not already have pygame. Then you have to set up some initial window settings that
	utilize functions of the pygame module in order to do things such as set the window
	size and pygame clock. Then I imported the image tower.png, resized it, and drew it 
	inside of my drawTower function. Then the only step left was to implement the drawTower function
	and a way to leave the window inside of the main execution. I did this by utilizing the
	way that pygame stores user events by checking every user event to see if the user
	tried to exit the window (via pressing the red x at the top corner), and then otherwise 
	the while loop will keep displaying the window and calling the drawTower function until that
	happens, and when it does pygame.quit() is run.
I ensured that this works by running it both on my own computer and a computer that did not have pygame.
	However, depending on the model computer (macs, specifically), you might have to reinstall pip
	to be able to install pygame. I had this problem and had to consult pbui to figure out that
	it was a problem with pip.
